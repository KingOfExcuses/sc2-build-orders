import { type NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState } from 'react'
import { trpc } from '../utils/trpc'
import { buildTypes } from './builds'

const Home: NextPage = () => {
  const createBuild = trpc.builds.createBuild.useMutation()
  const router = useRouter()
  const [matchup, setMatchup] = useState('')
  const [title, setTitle] = useState('')
  const [build, setBuild] = useState('')
  const [style, setStyle] = useState('')

  async function handleSubmitBuildOrder(e: React.FormEvent) {
    e.preventDefault()
    await createBuild.mutateAsync({
      matchup,
      title,
      build,
      style,
    })
    router.push('/builds')
  }

  return (
    <>
      <Head>
        <title>Submit a Build</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col justify-center px-4">
        <h1 className="my-4 text-xl">Submit a Build Order</h1>
        <form onSubmit={handleSubmitBuildOrder}>
          <label htmlFor="matchup" className="mb-2 block text-sm font-medium">
            Select Matchup
          </label>
          <select
            required
            value={matchup}
            onChange={(e) => setMatchup(e.target.value)}
            id="matchup"
            className="mb-4 block w-full rounded-lg p-2.5 text-sm font-medium text-gray-dark"
          >
            <option value="tvp">TvP</option>
            <option value="tvt">TvT</option>
            <option value="tvz">TvZ</option>
          </select>
          <fieldset>
            <label htmlFor="style" className="mb-2 block text-sm font-medium">
              Select Build Type
            </label>
            <select
              required
              value={style}
              onChange={(e) => setStyle(e.target.value)}
              id="style"
              className="block w-full rounded-lg p-2.5 text-sm font-medium text-gray-dark"
            >
              {buildTypes.map((buildType) => (
                <option key={buildType} value={buildType}>
                  {buildType}
                </option>
              ))}
            </select>
          </fieldset>

          <label
            htmlFor="title"
            className="mb-2 block pt-4 text-sm font-medium"
          >
            Build Title
          </label>
          <input
            required
            minLength={10}
            maxLength={100}
            placeholder="Insert build title here..."
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            id="title"
            type="text"
            className="block w-full rounded-lg p-2.5 text-sm font-medium text-gray-dark"
          />

          <label
            htmlFor="build"
            className="mb-2 block pt-4 text-sm font-medium"
          >
            Your build
          </label>
          <textarea
            required
            rows={4}
            className="block w-full rounded-lg p-2.5 text-sm font-medium text-gray-dark"
            placeholder="Insert your build here..."
            value={build}
            onChange={(e) => setBuild(e.target.value)}
          ></textarea>
          <button
            type="submit"
            className="mb-2 mt-4 rounded-lg bg-orange px-5 py-2.5 text-sm font-medium hover:bg-white hover:text-navy"
          >
            Submit Build
          </button>
        </form>
      </main>
    </>
  )
}

export default Home
