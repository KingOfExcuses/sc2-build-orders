import { type NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import { useState } from 'react'
import BuildCard from '../../../../../components/buildCard'
import { trpc } from '../../../../../utils/trpc'

export const allInBuildType = 'All In'
export const cheeseBuildType = 'Cheese'
export const ecoBuildType = 'Economic'
export const timingAttackBuildType = 'Timing Attack'
export const buildTypes = [
  allInBuildType,
  cheeseBuildType,
  ecoBuildType,
  timingAttackBuildType,
]

const ALL_BUILD_TYPE = 'all'

const FindBuildsPage: NextPage = () => {
  const router = useRouter()
  const [selectedBuildType, setSelectedBuildType] = useState(ALL_BUILD_TYPE)

  const { race = '', raceOpponent = '' } = router.query as {
    race: string
    raceOpponent: string
  }

  const builds = trpc.builds.getBuildsByMatchup.useQuery({
    matchup: `${race.toLowerCase().charAt(0)}v${raceOpponent
      .toLowerCase()
      .charAt(0)}`,
  })

  const filteredBuilds = (builds.data ?? []).filter((build) =>
    selectedBuildType === ALL_BUILD_TYPE
      ? true
      : build.style === selectedBuildType
  )

  return (
    <>
      <Head>
        <title>Builds</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container m-auto flex h-screen flex-col justify-center p-12">
        <div>
          {/* Race Images */}
          <div className="flex items-center justify-center">
            <Image
              className="w-200 h-200"
              src={`/images/${race}.png`}
              alt={''}
              width={200}
              height={200}
            />
            <h1 className="flex gap-4 text-2xl">VS</h1>

            <Image
              src={`/images/${raceOpponent}.png`}
              alt={''}
              width={200}
              height={200}
            />
          </div>
          <div className="flex h-full">
            {/* Left Colum - Filters */}
            {/* <StyleFilter /> */}
            <div className="w-1/6">
              <h1 className="mb-2 font-semibold">Style</h1>
              <ul className="items-center rounded-lg bg-navy text-sm font-medium">
                {buildTypes.map((buildType) => (
                  <li
                    key={buildType}
                    className="w-full border-b border-gray-light"
                  >
                    <div className="flex items-center pl-3">
                      <input
                        id={`build-radio-${buildType}`}
                        type="radio"
                        value={buildType}
                        name="list-radio"
                        checked={buildType === selectedBuildType}
                        className="h-4 w-4"
                        onChange={(e) => setSelectedBuildType(e.target.value)}
                      />
                      <label
                        htmlFor={`build-radio-${buildType}`}
                        className="ml-2 w-full py-3 text-sm font-medium"
                      >
                        {buildType}
                      </label>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
            {/* Right Column - Build Cards */}
            <div className="w-5/6 px-10">
              {filteredBuilds.map((build) => (
                <BuildCard key={build.id} build={build} />
              ))}
            </div>
          </div>
        </div>
      </main>
    </>
  )
}

export default FindBuildsPage
